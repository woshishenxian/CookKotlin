package com.cook.kotlin.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cook.kotlin.utils.StringConverter;
import java.util.List;

import com.cook.kotlin.db.model.RecentComic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECENT_COMIC".
*/
public class RecentComicDao extends AbstractDao<RecentComic, Long> {

    public static final String TABLENAME = "RECENT_COMIC";

    /**
     * Properties of entity RecentComic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property AuthorName = new Property(2, String.class, "authorName", false, "AUTHOR_NAME");
        public final static Property PicUrl = new Property(3, String.class, "picUrl", false, "PIC_URL");
        public final static Property TitleId = new Property(4, Integer.class, "titleId", false, "TITLE_ID");
        public final static Property EpisodeIds = new Property(5, String.class, "episodeIds", false, "EPISODE_IDS");
    }

    private final StringConverter episodeIdsConverter = new StringConverter();

    public RecentComicDao(DaoConfig config) {
        super(config);
    }
    
    public RecentComicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENT_COMIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"AUTHOR_NAME\" TEXT," + // 2: authorName
                "\"PIC_URL\" TEXT," + // 3: picUrl
                "\"TITLE_ID\" INTEGER," + // 4: titleId
                "\"EPISODE_IDS\" TEXT);"); // 5: episodeIds
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENT_COMIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentComic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(3, authorName);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(4, picUrl);
        }
 
        Integer titleId = entity.getTitleId();
        if (titleId != null) {
            stmt.bindLong(5, titleId);
        }
 
        List episodeIds = entity.getEpisodeIds();
        if (episodeIds != null) {
            stmt.bindString(6, episodeIdsConverter.convertToDatabaseValue(episodeIds));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentComic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(3, authorName);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(4, picUrl);
        }
 
        Integer titleId = entity.getTitleId();
        if (titleId != null) {
            stmt.bindLong(5, titleId);
        }
 
        List episodeIds = entity.getEpisodeIds();
        if (episodeIds != null) {
            stmt.bindString(6, episodeIdsConverter.convertToDatabaseValue(episodeIds));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecentComic readEntity(Cursor cursor, int offset) {
        RecentComic entity = new RecentComic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // authorName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // picUrl
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // titleId
            cursor.isNull(offset + 5) ? null : episodeIdsConverter.convertToEntityProperty(cursor.getString(offset + 5)) // episodeIds
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentComic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthorName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPicUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitleId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEpisodeIds(cursor.isNull(offset + 5) ? null : episodeIdsConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecentComic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecentComic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecentComic entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
